stages:
  - build
  - test
  - deploy
  - publish

include:
  - template: Security/SAST.gitlab-ci.yml


.registry_setup:
  variables:
    IMAGE_TAG: $CI_REGISTRY_IMAGE/website_telemetry:$CI_COMMIT_REF_SLUG
  before_script:
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
  tags:
    - docker
  only:
    refs:
      - main

build docker image:
  stage: build
  environment:
    name: Production
    url: https://telemetry-dev.qvineox.ru
  image: docker:25.0.2
  extends: .registry_setup
  script:
    - docker build . -t $IMAGE_TAG -f ./build/docker/Dockerfile
    - docker push $IMAGE_TAG
  tags:
    - docker
  only:
    refs:
      - main

sast:
  stage: test

trivy image scan:
  stage: test
  allow_failure: true
  image:
    name: docker.io/aquasec/trivy:latest
    entrypoint: [ "" ]
  variables:
    TRIVY_USERNAME: "$CI_REGISTRY_USER"
    TRIVY_PASSWORD: "$CI_REGISTRY_PASSWORD"
    TRIVY_AUTH_URL: "$CI_REGISTRY"

    TRIVY_NO_PROGRESS: "true"
    TRIVY_CACHE_DIR: ".trivycache/"
    #    TRIVY_INSECURE: "true"

    FULL_IMAGE_NAME: "$CI_REGISTRY_IMAGE/website_telemetry:$CI_COMMIT_REF_SLUG"
  script:
    # подготовка trivy: очистка кэша, обновление базы данных уязвимостей
    - trivy --version
    - time trivy image --clear-cache
    - time trivy image --download-db-only --no-progress --cache-dir .trivycache/

    # формирование отчета в формате GitLab (не работает в community версии)
    - time trivy image --exit-code 0 --format template --template "@/contrib/gitlab.tpl" --output "$CI_PROJECT_DIR/gl-code-scanning-report.json" $FULL_IMAGE_NAME

    # формирование отчета в текстовый файл
    - time trivy image --exit-code 0 --cache-dir .trivycache/ --no-progress --output "$CI_PROJECT_DIR/gl-code-scanning-report.txt" $FULL_IMAGE_NAME

    # формирование SBOM файла
    - time trivy image --exit-code 0 --cache-dir .trivycache/ --format cyclonedx --no-progress --output "$CI_PROJECT_DIR/gl-code-sbom.cdx.json" $FULL_IMAGE_NAME

    # вывести ошибку, если найдена критическая уязвимость
    - time trivy image --exit-code 1 --cache-dir .trivycache/ --severity CRITICAL --no-progress $FULL_IMAGE_NAME
  cache:
    paths:
      - .trivycache/
  artifacts:
    when: always
    expire_in: 1 week
    paths:
      - "$CI_PROJECT_DIR/gl-code-scanning-report.txt"
      - "$CI_PROJECT_DIR/gl-code-sbom.cdx.json"
    reports:
      codequality: gl-code-scanning-report.json
      cyclonedx: gl-code-sbom.cdx.json
  tags:
    - docker
  only:
    refs:
      - main


deploy to production:
  extends: .registry_setup
  stage: deploy
  needs:
    - build production docker image
  environment:
    name: Development
    url: https://telemetry-dev.qvineox.ru
  script:
    - docker pull $IMAGE_TAG
    - docker compose -f build/docker/docker-compose.yml up -d
  tags:
    - shell
  only:
    refs:
      - main

#publish to ghcr.io:
#  extends: .registry_setup
#  stage: publish
#  needs:
#    - deploy to production
#    - sast
#    - trivy image scan
#  environment:
#    name: Production
#    url: https://domain-threat-intel.qvineox.ru
#  script:
#    - docker login ghcr.io -u $GITHUB_USERNAME --password-stdin <<< $GITHUB_TOKEN
#    - docker push $IMAGE_TAG
#  tags:
#    - docker
#  only:
#    refs:
#      - main

